import json
import re
import os
import time
import math
import urllib.parse
import requests

from selenium.webdriver.common.by import By

from driver_config import is_element


def encode_url(text: str) -> str:
    return urllib.parse.quote(text, encoding='utf-8').replace('%20', '+')


def extract_avito_id(url):
    match = re.search(r'_(\d+)\?context', url)
    return match.group(1) if match else None


def send_message_to_telegram(text, tg_token, chat_id):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏"""
    max_length = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

    if len(text) <= max_length:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å—Ä–∞–∑—É
        requests.post(
            f'https://api.telegram.org/bot{tg_token}/sendMessage',
            data={'chat_id': chat_id, 'text': text}
        )
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
        parts = [text[i:i + max_length] for i in range(0, len(text), max_length)]
        for part in parts:
            requests.post(
                f'https://api.telegram.org/bot{tg_token}/sendMessage',
                data={'chat_id': chat_id, 'text': part}
            )


def get_urls(thread, driver, response: str, requests_pause: int = None, categories: str = None, city: str = 'all',
             max_page: int = None,
             keywords: list = None,
             black_list: list = None,
             min_price: int = None, max_price: int = None, tg_token: str = None, chat_id: str = None,
             update: bool = False, pause: int = None) -> list:
    """
    –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å Avito, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–∞—É–∑—ã.
    """
    json_file = r'product_id.json'
    product_data = {}
    min_price = int(min_price)
    max_price = int(max_price)
    if update:
        if os.path.exists(json_file) and os.path.getsize(json_file) > 0:
            try:
                with open(json_file, 'r', encoding='utf-8') as file:
                    product_data = json.load(file)
            except (json.JSONDecodeError, TypeError):
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è product_id.json. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é –±–∞–∑—É.")
                product_data = {}
        else:
            print("‚ö†Ô∏è –§–∞–π–ª product_id.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –±–∞–∑—É –ø—É—Å—Ç–æ–π.")

    first_run = (update and (len(product_data) == 0)) or (not update)
    iteration_count = 0

    while True:
        iteration_count += 1
        print("\n" + "=" * 80)
        print(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Ññ {iteration_count}")
        print("=" * 80 + "\n")

        total_urls = []
        if categories:
            url = f'https://www.avito.ru/{city}{categories}?p=1&q={response}'
        else:
            url = f'https://www.avito.ru/{city}?p=1&q={response}'
        driver.get(url)
        driver.refresh()
        new_data_found = False

        if not thread.running:
            return []
        if is_element(driver, 10, By.CLASS_NAME, 'no-results-title-jho0M'):
            print('üö´ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∏–ª–∏ –∑–∞–ø—Ä–æ—Å—É –ø–æ–∏—Å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Ñ–∏–ª—å—Ç—Ä—ã\n–ò—â–µ–º: –ü–æ—Ö–æ–∂–µ –Ω–∞ —Ç–æ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ')
            # return []
        if is_element(driver, 10, By.CLASS_NAME, 'page-title-count-yKVwK'):
            cards_count = int(driver.find_element(By.CLASS_NAME, 'page-title-count-yKVwK').text.replace(' ', ''))
            total_page = math.ceil(cards_count / 50)  # –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            page_count = min(total_page, max_page) if max_page else total_page  # –£—á–∏—Ç—ã–≤–∞–µ–º max_page

            print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {cards_count}')
            print(f'–ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü: {page_count}/{total_page}\n')
        else:
            page_count = 1
            print(f'\n–ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü: {page_count}\n')

        try:  # üîπ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ for-—Ü–∏–∫–ª–∞
            for page in range(1, page_count + 1):
                if page > 1:
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {requests_pause} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º...")
                    time.sleep(requests_pause)
                print(f'üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{page_count}')
                if not thread.running:
                    return []

                if categories:
                    url = f'https://www.avito.ru/{city}{categories}?p={page}&q={response}'
                else:
                    url = f'https://www.avito.ru/{city}?p={page}&q={response}'
                driver.get(url)
                for_tg = []

                if is_element(driver, 60, By.CLASS_NAME, 'items-items-pZX46'):
                    blocks = driver.find_elements(By.CLASS_NAME, 'iva-item-content-OWwoq')
                    for block in blocks:
                        if not thread.running:
                            return []
                        if is_element(driver, 60, By.TAG_NAME, 'a'):
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                                title = block.find_element(By.CSS_SELECTOR, '[data-marker="item-title"]').text
                                # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–∑ black_list —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ title, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                                if black_list and any(word.lower() in title.lower() for word in black_list):
                                    # print(f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (black_list): {title}")
                                    continue

                                href = block.find_element(By.TAG_NAME, 'a').get_attribute('href')
                                try:
                                    desc = block.find_element(By.CLASS_NAME, 'iva-item-bottomBlock-FhNhY').text
                                except:
                                    desc = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ü–µ–Ω—ã
                                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ü–µ–Ω—ã –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
                                item_price_text = block.find_element(By.CLASS_NAME,
                                                                     'price-priceContent-kPm_N').text.strip()

                                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                                if any(x in item_price_text.lower() for x in ["–æ—Ç", "–¥–æ", "-", "¬∑"]):
                                    continue
                                else:
                                    # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª —Ä—É–±–ª—è –∏ –ø—Ä–æ–±–µ–ª—ã, –∑–∞—Ç–µ–º –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏—Ñ—Ä
                                    clean_text = item_price_text.replace('‚ÇΩ', '').replace(' ', '')
                                    price_match = re.search(r'\d+', clean_text)
                                    item_price = int(price_match.group()) if price_match else None

                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —á–∏—Å–ª–æ–º, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–µ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ <strong>
                                if not item_price:
                                    item_price = block.find_element(By.TAG_NAME, 'strong').text

                                title_match = any(word in title.lower() for word in keywords) if keywords else True

                                price_match = True
                                if isinstance(item_price, int):
                                    if item_price is not None:
                                        if min_price is not None and item_price < min_price:
                                            price_match = False
                                        if max_price is not None and item_price > max_price:
                                            price_match = False
                                else:
                                    item_price = item_price

                                if title_match and price_match:
                                    total_urls.append(href)
                                    product_id = extract_avito_id(href)

                                    if update and product_id:
                                        old_price = product_data.get(product_id)
                                        if product_id in product_data:
                                            if old_price is not None and item_price is not None and item_price < old_price:
                                                print(
                                                    f"üìâ <b><font color='yellow'>–¶–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞!</font></b> {title} | <b><font color='yellow'>–ë—ã–ª–æ:</font></b> {old_price}‚ÇΩ | <b><font color='yellow'>–°—Ç–∞–ª–æ:</font></b> {item_price}‚ÇΩ")
                                                product_data[product_id] = item_price
                                                new_data_found = True
                                            else:
                                                continue
                                        else:
                                            print(
                                                f"üÜï <b><font color='yellow'>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!</font></b> {title} | <b><font color='yellow'>–¶–µ–Ω–∞:</font></b> {item_price if item_price else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}‚ÇΩ")
                                            product_data[product_id] = item_price
                                            new_data_found = True
                                    elif not update and product_id:
                                        new_data_found = True

                                    print(f"üìå {title}")
                                    print(f"üìù <b><font color='yellow'>–û–ø–∏—Å–∞–Ω–∏–µ:</font></b>: {desc}")
                                    print(f"üîó <b><font color='yellow'>–°—Å—ã–ª–∫–∞:</font></b> {href}")
                                    print(
                                        f"üí∞ <b><font color='yellow'>–¶–µ–Ω–∞:</font></b> {item_price if item_price else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}‚ÇΩ")
                                    print("-" * 50)

                                    for_tg.append(
                                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–°—Å—ã–ª–∫–∞: {href}\n–¶–µ–Ω–∞: {item_price if item_price else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}‚ÇΩ\n")
                                    parsed_data = {"–ù–∞–∑–≤–∞–Ω–∏–µ": title,
                                                   "–û–ø–∏—Å–∞–Ω–∏–µ": desc,
                                                   "–¶–µ–Ω–∞": item_price if item_price else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞",
                                                   "URL": href}
                                    thread.data_collected.emit(parsed_data)

                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {str(e)}")
                                continue

                    if for_tg and tg_token:
                        message_text = "\n".join(for_tg)
                        send_message_to_telegram(message_text, tg_token, chat_id)
                    for_tg.clear()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
            continue
        if update:
            if first_run:
                print("üÜï –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                first_run = False
            elif not new_data_found:
                print("üîπ –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω.")

            if new_data_found:
                with open(json_file, 'w', encoding='utf-8') as file:
                    json.dump(product_data, file, indent=4, ensure_ascii=False)

            print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é: {len(total_urls)}")
        else:
            print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(total_urls)}")
            break

        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {pause} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º...")
        time.sleep(pause)

    return total_urls

